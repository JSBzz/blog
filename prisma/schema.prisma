generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model post {
  id            BigInt         @id @default(autoincrement())
  title         String?        @db.VarChar
  title_slug    String         @unique @db.VarChar
  contents      String?        @db.VarChar
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  writer_seq    BigInt?
  category_code String?        @db.VarChar
  category      category?      @relation(fields: [category_code], references: [category_code], onDelete: NoAction, onUpdate: NoAction)
  user          user?          @relation(fields: [writer_seq], references: [seq], onDelete: NoAction, onUpdate: NoAction)
  post_comment  post_comment[]
  post_tag      post_tag[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user {
  seq          BigInt         @id @default(autoincrement())
  id           String         @unique @db.VarChar
  nickname     String?        @db.VarChar
  role         String         @db.VarChar
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  pwd          String?        @db.VarChar
  post         post[]
  post_comment post_comment[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model post_tag {
  id         BigInt   @id @default(autoincrement())
  table_id   BigInt?
  tag_name   String?  @db.VarChar
  tag_color  String?  @db.VarChar
  created_at DateTime @default(now()) @db.Timestamptz(6)
  post       post?    @relation(fields: [table_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model category {
  id                   BigInt     @id @default(autoincrement())
  category_name        String     @db.VarChar
  created_at           DateTime   @default(now()) @db.Timestamptz(6)
  category_code        String?    @unique @db.VarChar
  parent_category_code String?    @db.VarChar
  category             category?  @relation("categoryTocategory", fields: [parent_category_code], references: [category_code], onDelete: NoAction, onUpdate: NoAction)
  other_category       category[] @relation("categoryTocategory")
  post                 post[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model post_comment {
  id             BigInt    @id @default(autoincrement())
  post_id        BigInt
  comment        String    @db.VarChar
  is_delete      Boolean   @default(false)
  password       String?   @db.VarChar
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  guest_nickname String?   @db.VarChar
  writer_id      String?   @db.VarChar
  changed_at     DateTime? @db.Timestamptz(6)
  post           post      @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user?     @relation(fields: [writer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
